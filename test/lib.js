/* generated by Buddy */
if (window._m_ == null) window._m_ = {};
if (window.require == null) {
  window.require = function require (id) {
    if (!_m_[id]) return;
    return (_m_[id].boot) ? _m_[id]() : _m_[id];
  };
}
var global = window.global = window;

(function (global) {
  var babelHelpers = global.babelHelpers = {};

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers.get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers.taggedTemplateLiteral = function (strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  };
})(typeof global === "undefined" ? self : global);
_m_['src/index.js']=(function(module,exports){
  module=this;exports=module.exports;

  'use strict';
  
  var useNative = document.documentElement.classList != null;
  
  var RE_TRIM = /^\s+|\s+$/g;
  
  /**
   * Check if 'element' has class 'clas'
   * @param {Element} element
   * @param {String} clas
   * @returns {Boolean}
   */
  exports.hasClass = function (element, clas) {
    if (useNative) {
      return element.classList.contains(clas);
    }
  
    var classes = element.className.replace(RE_TRIM, '').split(' ');
  
    return contains(classes, clas);
  };
  
  /**
   * Check if 'element' has a class matching 'pattern'
   * @param {Element} element
   * @param {String} pattern
   * @returns {String}
   */
  exports.matchClass = function (element, pattern) {
    var classes = element.className.replace(RE_TRIM, '').split(' ');
    var clas = void 0;
  
    for (var i = 0, n = classes.length; i < n; i++) {
      clas = classes[i];
      if (clas.indexOf(pattern) !== -1) {
        return clas;
      }
    }
    return '';
  };
  
  /**
   * Add class 'clas' to 'element'
   * @param {Element} element
   * @param {String} clas
   */
  exports.addClass = function (element, clas) {
    if (useNative) {
      element.classList.add(clas);
    } else {
      element.className += ' ' + clas;
    }
  };
  
  /**
   * Remove class 'clas' from 'element'
   * @param {Element} element
   * @param {String} clas
   */
  exports.removeClass = function (element, clas) {
    if (clas) {
      if (useNative) {
        element.classList.remove(clas);
      } else {
        var classes = element.className.replace(RE_TRIM, '').split(' ');
        var results = [];
  
        for (var i = 0, n = classes.length; i < n; i++) {
          if (classes[i] !== clas) results.push(classes[i]);
        }
        element.className = results.join(' ');
      }
    }
  };
  
  /**
   * Toggle class 'clas' on 'element'
   * @param {Element} element
   * @param {String} clas
   */
  exports.toggleClass = function (element, clas) {
    if (exports.hasClass(element, clas)) {
      exports.removeClass(element, clas);
    } else {
      exports.addClass(element, clas);
    }
  };
  
  /**
   * Replace class 'clasOld' with 'clasNew' on 'element'
   * @param {Element} element
   * @param {String} clasOld
   * @param {String} clasNew
   */
  exports.replaceClass = function (element, clasOld, clasNew) {
    if (clasOld) {
      if (clasNew) {
        element.className = element.className.replace(clasOld, clasNew);
      } else {
        exports.removeClass(element, clasOld);
      }
    } else if (clasNew) {
      exports.addClass(element, clasNew);
    }
  };
  
  /**
   * Add class 'clas' to 'element', and remove after 'duration' milliseconds
   * @param {Element} element
   * @param {String} clas
   * @param {Number} duration
   */
  exports.addTemporaryClass = function (element, clas, duration) {
    exports.addClass(element, clas);
    setTimeout(function () {
      exports.removeClass(element, clas);
    }, duration);
  };
  
  /**
   * Determine if 'arr' contains 'item'
   * @param {Array} arr
   * @param {Object|String|Number} item
   * @returns {Boolean}
   */
  function contains(arr, item) {
    for (var i = 0, n = arr.length; i < n; i++) {
      if (arr[i] === item) return true;
    }
    return false;
  }

  return module.exports;
}).call({exports:{}});